import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from aiogram.types import CallbackQuery

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

logging.basicConfig(level=logging.INFO)

current_pairings = {}
users = {}

SUBJECT_CHAT_LINKS = {
    "–í—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "https://t.me/+GrZtERbAswBiZjgy",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "https://t.me/+OJEqXi2DFIxmODEy",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "https://t.me/+t8rAcHOvPRw3M2Fi",
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏": "https://t.me/+sFYMivtyiiw1MGUy",
    "–ò—Å—Ç–æ—Ä–∏—è": "https://t.me/+N57kMOevoWE1NGUy",
    "–ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "https://t.me/+9Iu0mYOnqtwyNDYy",
    "–§–∏–ª–æ—Å–æ—Ñ–∏—è": "https://t.me/+HbqVLZ8x5gI4OTky"
}

session = AiohttpSession()
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML), session=session)
dp = Dispatcher()


SUBJECTS = [
    "–í—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏", "–ò—Å—Ç–æ—Ä–∏—è", "–ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–§–∏–ª–æ—Å–æ—Ñ–∏—è"
]

DIRECTION = [
    "–ò–í–¢", "–ü–ú–ò", "–ò–ë–ê–°",
    "–ò–ú–§", "–§–ò–ò–¢", "11 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "12 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
]

COURSE = [
    "1", "2", "3",
    "4", "5"
]

def get_like_response_keyboard(liker_id: int):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{liker_id}")
    keyboard.button(text="üö´ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ignore")
    return keyboard.as_markup()

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞")],
        [KeyboardButton(text="üè† –ó–∞–π—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É")],
        [KeyboardButton(text="‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")],
        [KeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É")]
    ],
    resize_keyboard=True
)

profile_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üëç –õ–∞–π–∫", callback_data="like")],
    [InlineKeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫", callback_data="dislike")],
    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
])

class Registration(StatesGroup):
    waiting_for_hobby = State()
    waiting_for_name = State()
    waiting_for_direction = State()
    waiting_for_course = State()
    waiting_for_photo = State()
    waiting_for_subjects = State()
    waiting_for_help_subject = State()
    waiting_for_comment = State()



@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in users:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é.", reply_markup=menu_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(Registration.waiting_for_name)

@dp.message(Registration.waiting_for_name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=direction)] for direction in DIRECTION],
        resize_keyboard=True
    )

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(Registration.waiting_for_direction)

@dp.message(Registration.waiting_for_direction, F.text)
async def process_direction(message: types.Message, state: FSMContext):
    if message.text not in DIRECTION:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return

    await state.update_data(direction=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=course)] for course in COURSE],
        resize_keyboard=True
    )
    await message.answer("–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=keyboard)
    await state.set_state(Registration.waiting_for_course)

@dp.message(Registration.waiting_for_course, F.text)
async def process_course(message: types.Message, state: FSMContext):
    if message.text not in COURSE:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return

    await state.update_data(course=message.text)
    data = await state.get_data()
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['direction']}, –∫—É—Ä—Å: {data['course']}.",
        reply_markup=ReplyKeyboardRemove()
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True
    )
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.", reply_markup=keyboard)
    await state.set_state(Registration.waiting_for_hobby)

@dp.message(Registration.waiting_for_hobby, F.text)
async def process_hobby(message: types.Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(hobby=" ")
    else:
        await state.update_data(hobby=message.text)

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.waiting_for_photo)

@dp.message(Registration.waiting_for_photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=subj)] for subj in SUBJECTS] + [[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")]],
        resize_keyboard=True
    )

    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è:", reply_markup=keyboard)
    await state.update_data(subjects=[], available_subjects=SUBJECTS.copy())
    await state.set_state(Registration.waiting_for_subjects)

@dp.message(Registration.waiting_for_subjects, F.text)
async def process_subject_selection(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    available_subjects = user_data["available_subjects"]

    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        if not user_data["subjects"]:
            await message.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞! –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.")
            return

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=subj)] for subj in SUBJECTS],
            resize_keyboard=True
        )

        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:", reply_markup=keyboard)
        await state.set_state(Registration.waiting_for_help_subject)
        return

    if message.text in available_subjects:
        available_subjects.remove(message.text)
        user_data["subjects"].append(message.text)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=subj)] for subj in available_subjects] + [[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")]],
            resize_keyboard=True
        )

        await state.update_data(subjects=user_data["subjects"], available_subjects=available_subjects)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {message.text}. –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å   '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'.", reply_markup=keyboard)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞!")

@dp.message(Registration.waiting_for_help_subject, F.text)
async def process_help_subject(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    available_help_subjects = [subj for subj in SUBJECTS if subj not in user_data.get("subjects", [])]
    if message.text not in available_help_subjects:
        await message.answer("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —Ç—ã –∏ —Ç–∞–∫ –∑–Ω–∞–µ—à—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π.")
        return

    await state.update_data(help_subject=message.text)
    users[message.from_user.id] = await state.get_data()

    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤, –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.",
        reply_markup=menu_keyboard
    )

    user_data = users[message.from_user.id]
    text = (
        f"üìú <b>–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {user_data['name']}\n"
        f"üìö <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {user_data['direction']}\n"
        f"üéì <b>–ö—É—Ä—Å:</b> {user_data['course']}\n"
        f"üé® <b>–û —Å–µ–±–µ:</b> {user_data['hobby']}\n"
        f"üìñ <b>–†–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤:</b> {', '.join(user_data['subjects'])}\n"
        f"‚ùó <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤:</b> {user_data['help_subject']}"
    )

    await bot.send_photo(
        chat_id=message.from_user.id,
        photo=user_data["photo"],
        caption=text,
        reply_markup=menu_keyboard
    )

    await state.clear()



def find_matching_users(user_id):
    if user_id not in users:
        return []

    my_help_subject = users[user_id]["help_subject"]

    matching_users = [
        uid for uid, data in users.items()
        if uid != user_id and my_help_subject in data["subjects"]
    ]

    return matching_users



@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞")
async def find_partner(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    matching_users = find_matching_users(user_id)

    if not matching_users:
        await message.answer("üòî –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!", reply_markup=menu_keyboard)
        return

    await state.update_data(matching_users=matching_users, current_index=0)

    await message.answer("üîç –ò—â—É –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞...", reply_markup=ReplyKeyboardRemove())

    await send_next_profile(message, state)

async def send_next_profile(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    matching_users = user_data.get("matching_users", [])
    current_index = user_data.get("current_index", 0)

    if current_index >= len(matching_users):
        await message.answer("üìå –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=menu_keyboard)
        await state.clear()
        return

    target_user_id = matching_users[current_index]
    target_user = users[target_user_id]

    profile_text = (
        f"üìú <b>–ê–Ω–∫–µ—Ç–∞ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {target_user['name']}\n"
        f"üìö <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {target_user['direction']}\n"
        f"üéì <b>–ö—É—Ä—Å:</b> {target_user['course']}\n"
        f"üé® <b>–û —Å–µ–±–µ:</b> {target_user['hobby']}\n"
        f"üìñ <b>–†–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤:</b> {', '.join(target_user['subjects'])}\n"
        f"‚ùó <b>–ù–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤:</b> {users[message.from_user.id]['help_subject']}"
    )

    await bot.send_photo(
        chat_id=message.from_user.id,
        photo=target_user["photo"],
        caption=profile_text,
        reply_markup=profile_keyboard
    )

    await state.update_data(current_index=current_index + 1)

@dp.callback_query(F.data == "like")
async def like_user(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    matching_users = user_data.get("matching_users", [])
    current_index = user_data.get("current_index", 0) - 1

    if current_index < 0 or current_index >= len(matching_users):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ª–∞–π–∫–∞.")
        return

    liked_user_id = matching_users[current_index]

    await state.update_data(liked_user=liked_user_id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True
    )
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=keyboard)
    await state.set_state(Registration.waiting_for_comment)

@dp.message(Registration.waiting_for_comment, F.text)
async def process_comment(message: types.Message, state: FSMContext):

    user_data = await state.get_data()
    liked_user_id = user_data.get("liked_user")

    if not liked_user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∞–π–∫–Ω—É—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        return

    comment = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    liker_data = users.get(message.from_user.id)

    if not liker_data:
        await message.answer("–û—à–∏–±–∫–∞: —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    profile_text = (
        f"üìú <b>–ê–Ω–∫–µ—Ç–∞ –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ —Ç–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {liker_data['name']}\n"
        f"üìö <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {liker_data['direction']}\n"
        f"üéì <b>–ö—É—Ä—Å:</b> {liker_data['course']}\n"
        f"üé® <b>–û —Å–µ–±–µ:</b> {liker_data['hobby']}\n"
        f"üìñ <b>–†–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤:</b> {', '.join(liker_data['subjects'])}\n"
        f"‚ùó <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤:</b> {liker_data['help_subject']}\n\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
    )

    try:
        await bot.send_photo(
            chat_id=liked_user_id,
            photo=liker_data["photo"],
            caption=profile_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_like_response_keyboard(message.from_user.id)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞: {e}")

    await message.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É...", reply_markup=ReplyKeyboardRemove())
    await send_next_profile(message, state)

@dp.callback_query(F.data.startswith("reply_"))
async def process_reply(callback: types.CallbackQuery):
    liker_id = int(callback.data.split("_")[1])

    liker = await bot.get_chat(liker_id)
    responder = await bot.get_chat(callback.from_user.id)

    async def handle_callback(callback, liker, responder, keyboard, liker_id):
        # ... other code ...

        if not liker.username or not responder.username:
            retry_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"retry_link_{liker_id}")]
            ])

            await callback.message.answer(
                "‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∫—Ä—ã–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n"
                "üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'.",
                reply_markup=retry_keyboard
            )
            await callback.answer()
            return

    liker_link = f"https://t.me/{liker.username}"
    responder_link = f"https://t.me/{responder.username}"

    await bot.send_message(
        chat_id=liker_id,
        text=f"üíå <b>–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π –ª–∞–π–∫!</b>\n\n"
             f"üëâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å <a href='{responder_link}'>–Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º</a>",
        parse_mode=ParseMode.HTML,
        reply_markup = menu_keyboard
    )

    await callback.message.answer(
        f"üíå <b>–¢—ã –ø—Ä–∏–Ω—è–ª(–∞) –ª–∞–π–∫!</b>\n\n"
        f"üëâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å <a href='{liker_link}'>–Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º</a>",
        parse_mode=ParseMode.HTML,
        reply_markup=menu_keyboard
    )

    await callback.answer("–°—Å—ã–ª–∫–∏ –Ω–∞ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")


@dp.callback_query(F.data == "ignore")
async def process_ignore(callback: types.CallbackQuery):
    await callback.message.answer("‚ùå –¢—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –ª–∞–π–∫.")
    await callback.answer()

@dp.callback_query(F.data == "dislike")
async def dislike_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("üëé –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫.")

    user_data = await state.get_data()
    current_index = user_data.get("current_index", 0)
    matching_users = user_data.get("matching_users", [])

    current_index += 1
    await state.update_data(current_index=current_index)

    if current_index < len(matching_users):
        await send_next_profile(callback.message, state)
    else:
        await callback.message.answer("üìå –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=menu_keyboard)
        await state.clear()

@dp.callback_query(F.data == "main_menu")
async def process_main_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu_keyboard)
    await state.clear()
    await callback.answer()



@dp.message(F.text == "üè† –ó–∞–π—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É")
async def choose_group(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer("üìö –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç...", reply_markup=ReplyKeyboardRemove())
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    user_data = users[user_id]
    user_subjects = user_data["subjects"]
    help_subject = user_data["help_subject"]

    if not user_subjects:
        await message.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
        return

    keyboard = ReplyKeyboardBuilder()

    for subject in user_subjects:
        keyboard.button(text=subject)

    if help_subject and help_subject not in user_subjects:
        keyboard.button(text=help_subject)

    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    keyboard.adjust(2)

    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç:",
                         reply_markup=keyboard.as_markup(resize_keyboard=True))

@dp.message(lambda message: message.text in SUBJECT_CHAT_LINKS)
async def send_chat_link(message: types.Message):
    user_id = message.from_user.id
    user_data = users.get(user_id)

    if not user_data:
        await message.answer("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    chosen_subject = message.text

    links = []

    if chosen_subject in SUBJECT_CHAT_LINKS:
        links.append(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{chosen_subject}</b>:\n{SUBJECT_CHAT_LINKS[chosen_subject]}")

    await message.answer("\n\n".join(links), parse_mode=ParseMode.HTML)

@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer("üîô –¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu_keyboard)



@dp.message(F.text == "‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
async def reset_form(message: types.Message, state: FSMContext):
    users.pop(message.from_user.id, None)
    await state.clear()
    await message.answer("–ê–Ω–∫–µ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Registration.waiting_for_name)



@dp.message(F.text == "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def disable_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in users:
        users.pop(user_id)
        await state.clear()
        await message.answer("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ /start.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∏ —Ç–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())



async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
